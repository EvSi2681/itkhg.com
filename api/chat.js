export default async function handler(req, res) {
  // –¢–æ–ª—å–∫–æ POST
  if (req.method !== 'POST') {
    return res.status(405).json({ answer: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
  const apiKey = process.env.QWEN_API_KEY;
  if (!apiKey) {
    console.error('‚ùå QWEN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return res.status(500).json({ 
      answer: '–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.' 
    });
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω, –∫–ª—é—á –µ—Å—Ç—å');

  try {
    const { question } = req.body;

    // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ API (–¥–ª—è —Ç–µ—Å—Ç–∞)
    return res.status(200).json({
      answer: `–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: "${question}". –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–ª—é—á: ${apiKey ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`
    });

  } catch (error) {
    console.error('üî¥ –û—à–∏–±–∫–∞:', error);
    return res.status(500).json({ 
      answer: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞' 
    });
  }
}

// –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
export const config = {
  runtime: 'edge',
};
